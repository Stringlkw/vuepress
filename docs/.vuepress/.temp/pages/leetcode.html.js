import comp from "C:/Users/lkw/Documents/VsCode/vuepress/docs/.vuepress/.temp/pages/leetcode.html.vue"
const data = JSON.parse("{\"path\":\"/leetcode.html\",\"title\":\"Leetcode算法题解\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"回溯法\",\"slug\":\"回溯法\",\"link\":\"#回溯法\",\"children\":[]}],\"git\":{},\"filePathRelative\":\"leetcode.md\",\"excerpt\":\"\\n<h2>回溯法</h2>\\n<p>回溯算法是一种试探性的解决问题方法，它尝试寻找问题的解，如果发现当前的解不能满足，就会回退到上一步，然后寻找另一个可能的解。回溯算法通常用于解决约束满足问题，这类问题通常有多个可能的解决方案，回溯算法可以找到所有的解决方案，或者至少找到一个解决方案。</p>\\n<p>回溯算法的基本过程是：</p>\\n<ol>\\n<li>\\n<p>从问题的解空间（即所有可能的解）的根节点开始。</p>\\n</li>\\n<li>\\n<p>对当前节点进行检查：</p>\\n<ul>\\n<li>如果它满足所有的约束条件，那么就把它添加到解决方案中。</li>\\n<li>如果它不满足所有的约束条件，那么就生成它的所有可能的子节点，然后对每个子节点进行步骤2。</li>\\n</ul>\\n</li>\\n<li>\\n<p>如果当前节点没有子节点，或者所有的子节点都已经被检查过，那么就回溯到当前节点的父节点。</p>\\n</li>\\n<li>\\n<p>重复步骤2和3，直到找到一个解决方案，或者所有的节点都已经被检查过。</p>\\n</li>\\n</ol>\"}")
export { comp, data }
